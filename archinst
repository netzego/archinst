#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

# IFS=$'\n\t'

readonly SCRIPTDIR="$(dirname "$(realpath "${BASH_ARGV0}")")"
readonly ARGS=("$@")

source "${SCRIPTDIR}/include/colors.bash"
source "${SCRIPTDIR}/include/utils.bash"
source "${SCRIPTDIR}/include/vars.bash"
source "${SCRIPTDIR}/include/cleanup.bash"
source "${SCRIPTDIR}/include/check_root.bash"
source "${SCRIPTDIR}/include/load_configfile.bash"
source "${SCRIPTDIR}/include/parse_args.bash"
source "${SCRIPTDIR}/include/check_args.bash"
source "${SCRIPTDIR}/include/write_lockfile.bash"
source "${SCRIPTDIR}/include/print_help.bash"
source "${SCRIPTDIR}/include/print_version.bash"
source "${SCRIPTDIR}/include/print_usage.bash"
source "${SCRIPTDIR}/include/print_vars.bash"
source "${SCRIPTDIR}/include/print_header.bash"
source "${SCRIPTDIR}/include/warning.bash"
source "${SCRIPTDIR}/include/check_device.bash"
source "${SCRIPTDIR}/include/check_network.bash"
source "${SCRIPTDIR}/include/load_keymap.bash"
source "${SCRIPTDIR}/include/check_timedate.bash"
source "${SCRIPTDIR}/include/write_gpt_table.bash"
source "${SCRIPTDIR}/include/update_mirrorlist.bash"
source "${SCRIPTDIR}/include/update_pacman.bash"
source "${SCRIPTDIR}/include/create_workspace.bash"
source "${SCRIPTDIR}/include/luks_format.bash"
source "${SCRIPTDIR}/include/luks_open.bash"
source "${SCRIPTDIR}/include/mkfs_btrfs.bash"
source "${SCRIPTDIR}/include/mkfs_swapfile.bash"
    source "${SCRIPTDIR}/include/check_mountpoint.bash"
    source "${SCRIPTDIR}/include/mount_btrfs.bash"
    source "${SCRIPTDIR}/include/mkfs_fat32.bash"
    source "${SCRIPTDIR}/include/mount_fat32.bash"
    source "${SCRIPTDIR}/include/install_packages.bash"
    source "${SCRIPTDIR}/include/gen_fstab.bash"
    source "${SCRIPTDIR}/include/gen_locale.bash"
    source "${SCRIPTDIR}/include/systemd_firstboot.bash"
    source "${SCRIPTDIR}/include/install_bootloader.bash"
    source "${SCRIPTDIR}/include/gen_cmdline.bash"
    source "${SCRIPTDIR}/include/configure_initrd.bash"

# ARGS: none
# NOTE: stdout and stderr will eventually get logged
main() {
    if [ "${DEBUG}" = true ]; then
        print_vars
    fi

    warning

    check_device "${DEVICE}"
    check_network "archlinux.org" 2 1
    load_keymap "${KEYMAP}"
    check_timedate
    update_mirrorlist
    update_pacman
    create_workspace

    # disc preparation
    write_gpt_table "${DEVICE}" "${UEFI_SIZE}"

    readonly UEFIPART="$(ls -1 "${DEVICE}"?1)"
    readonly ROOTPART="$(ls -1 "${DEVICE}"?2)"

    if [ ! -b "${UEFIPART}" ]; then
        die 2 "\`${UEFIPART}' is not a block device"
    fi

    if [ ! -b "${ROOTPART}" ]; then
        die 2 "\`${ROOTPART}' is not a block device"
    fi

    luks_format "${ROOTPART}" "${PWD}/archinst.luks"
    luks_open "${ROOTPART}" "${PWD}/archinst.luks"

    readonly LUKSPART="$(lsblk --raw -n -p -o NAME,TYPE "${ROOTPART}" | grep crypt | cut -d ' ' -f 1)"

    if [ ! -e "${LUKSPART}" ]; then
        die 2 "\`${LUKSPART}' do not exists"
    fi

    mkfs_btrfs "${LUKSPART}"
    mkfs_swapfile
}

check_root
load_configfile
parse_args "${ARGS[@]}"
check_args

if [ "${#POS_ARGS[@]}" -ne 1 ]; then
    print_usage
    die 1 "you must specify a device"
else
    readonly DEVICE="${POS_ARGS[0]}"
fi

trap cleanup EXIT

if [ "${HELP}" = true ]; then
    print_help
    exit 0
fi

if [ "${VERSION}" = true ]; then
    print_version
    exit 0
fi

write_lockfile
main 2>&1 | tee "${LOGFILE}"

exit 0
