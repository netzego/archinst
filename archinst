#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

# IFS=$'\n\t'

readonly SCRIPTDIR="$(dirname "$(realpath "${BASH_ARGV0}")")"
readonly ARGS=("$@")

# source external files
{
    source "${SCRIPTDIR}/include/colors.bash"
    source "${SCRIPTDIR}/include/utils.bash"
    source "${SCRIPTDIR}/include/vars.bash"
    source "${SCRIPTDIR}/include/cleanup.bash"
    source "${SCRIPTDIR}/include/check_root.bash"
    source "${SCRIPTDIR}/include/load_configfile.bash"
    source "${SCRIPTDIR}/include/parse_args.bash"
    source "${SCRIPTDIR}/include/check_args.bash"
    source "${SCRIPTDIR}/include/write_lockfile.bash"
    source "${SCRIPTDIR}/include/print_help.bash"
    source "${SCRIPTDIR}/include/print_version.bash"
    source "${SCRIPTDIR}/include/print_usage.bash"
    source "${SCRIPTDIR}/include/print_vars.bash"
    source "${SCRIPTDIR}/include/print_header.bash"
    source "${SCRIPTDIR}/include/warning.bash"
    source "${SCRIPTDIR}/include/check_device.bash"
    source "${SCRIPTDIR}/include/check_network.bash"
    source "${SCRIPTDIR}/include/load_keymap.bash"
    source "${SCRIPTDIR}/include/check_timedate.bash"
    source "${SCRIPTDIR}/include/write_gpt_table.bash"
    source "${SCRIPTDIR}/include/update_mirrorlist.bash"
    source "${SCRIPTDIR}/include/update_pacman.bash"
    source "${SCRIPTDIR}/include/create_workspace.bash"
    source "${SCRIPTDIR}/include/luks_format.bash"
    source "${SCRIPTDIR}/include/luks_open.bash"
    source "${SCRIPTDIR}/include/mkfs_btrfs.bash"
    source "${SCRIPTDIR}/include/check_mountpoint.bash"
    source "${SCRIPTDIR}/include/mount_btrfs.bash"
    source "${SCRIPTDIR}/include/mkfs_swapfile.bash"
    source "${SCRIPTDIR}/include/mkfs_fat32.bash"
    source "${SCRIPTDIR}/include/mount_fat32.bash"
    source "${SCRIPTDIR}/include/install_packages.bash"
    source "${SCRIPTDIR}/include/gen_fstab.bash"
    source "${SCRIPTDIR}/include/gen_locale.bash"
    source "${SCRIPTDIR}/include/systemd_firstboot.bash"
    source "${SCRIPTDIR}/include/install_bootloader.bash"
    source "${SCRIPTDIR}/include/gen_cmdline.bash"
    source "${SCRIPTDIR}/include/configure_initrd.bash"
    source "${SCRIPTDIR}/include/gen_initrd.bash"
    source "${SCRIPTDIR}/include/configure_networkd.bash"
    source "${SCRIPTDIR}/include/configure_timesyncd.bash"
    source "${SCRIPTDIR}/include/configure_sshd.bash"
    source "${SCRIPTDIR}/include/add_user.bash"
    source "${SCRIPTDIR}/include/copy_sshkeys.bash"
    source "${SCRIPTDIR}/include/remove_pam_securetty.bash"
}

main() {
    if [ "${DEBUG}" = true ]; then
        print_vars
    fi

    warning

    check_device "${DEVICE}"

    # host preparation
    {
        check_network "archlinux.org" 2 1
        load_keymap "${KEYMAP}"
        check_timedate
        update_mirrorlist
        update_pacman
        create_workspace
    }

    # device preparation
    {
        write_gpt_table "${DEVICE}" "${UEFI_SIZE}"

        {
            print_header "partitions"

            # on a tested chromebook maybe a mmblkNbootN is present.  this
            # is why we need the `tail -n 1`. because mmblkNpN comes after the
            # boot partition.
            # TODO: find a "cleaner" solution
            readonly UEFIPART="$(ls -1 "${DEVICE}"*1 | tail -n 1)"
            readonly ROOTPART="$(ls -1 "${DEVICE}"*2 | tail -n 1)"

            if [ ! -b "${UEFIPART}" ]; then
                die 2 "\`${UEFIPART}' is not a block device"
            fi

            if [ ! -b "${ROOTPART}" ]; then
                die 2 "\`${ROOTPART}' is not a block device"
            fi

            info "uefipart" "${UEFIPART}"
            info "rootpart" "${ROOTPART}"
        }

        luks_format "${ROOTPART}" "${PWD}/archinst.luks"
        luks_open "${ROOTPART}" "${PWD}/archinst.luks"

        {
            print_header "luks2 partition"

            readonly LUKSPART="$(lsblk --raw -n -p -o NAME,TYPE "${ROOTPART}" | grep crypt | cut -d ' ' -f 1)"

            if [ ! -e "${LUKSPART}" ]; then
                die 2 "\`${LUKSPART}' does not exists"
            fi

            info "lukspart" "${LUKSPART}"
        }

        mkfs_btrfs "${LUKSPART}"
        mount_btrfs "${LUKSPART}"
        mkfs_swapfile
        mkfs_fat32 "${UEFIPART}"
        mount_fat32

        {
            print_header "partition uuid"

            readonly ROOTUUID="$(blkid -s UUID -o value "${ROOTPART}")"
            readonly LUKSUUID="$(blkid -s UUID -o value "${LUKSPART}")"

            info "rootuuid" "${ROOTUUID}"
            info "luksuuid" "${LUKSUUID}"
        }
    }

    # installation
    {
        install_packages
        gen_fstab
        gen_locale
        systemd_firstboot
        install_bootloader
        gen_cmdline "${ROOTUUID}" "${LUKSUUID}"
        configure_initrd
        gen_initrd
    }

    # configuration
    {
        configure_networkd
        configure_timesyncd
        configure_sshd
        add_user
        copy_sshkeys
        remove_pam_securetty
    }

    # finshing
    {
        sync "${MOUNTPOINT}"
        umount -v -R "${MOUNTPOINT}"
        # congrats
    }
}

init() {
    check_root

    # parse cli args
    {
        # load_configfile
        source "${CONFIGFILE}"
        parse_args "${ARGS[@]}"

        # handle help and version case
        {
            if [ "${HELP}" = true ]; then
                print_help
                exit 0
            fi

            if [ "${VERSION}" = true ]; then
                print_version
                exit 0
            fi
        }

        # check global variables set thru getopt and configfile
        {
            # check_args # TODO: only check LOGFILE

            check_logfile "${LOGFILE}"
        }

        # check for required positional cli arguments
        {
            if [ "${#POS_ARGS[@]}" -ne 1 ]; then
                print_usage
                die 1 "you must specify a device"
            else
                readonly DEVICE="${POS_ARGS[0]}"
            fi
        }
    }

    trap cleanup EXIT

    check_lockfile "${LOCKFILE}"
    write_lockfile "${LOCKFILE}"
}

init
main 2>&1 | tee "${LOGFILE}"

exit 0
